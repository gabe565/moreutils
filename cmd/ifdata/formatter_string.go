// Code generated by "enumer -type formatter -linecomment -output formatter_string.go"; DO NOT EDIT.

package ifdata

import (
	"fmt"
	"strings"
)

const _formatterName = "-e-p-pe-pa-pn-pN-pb-pm-pf-ph-si-sip-sib-sie-sid-sif-sic-sim-so-sop-sob-soe-sod-sof-sox-soc-som-bips-bops"

var _formatterIndex = [...]uint8{0, 0, 2, 4, 7, 10, 13, 16, 19, 22, 25, 28, 31, 35, 39, 43, 47, 51, 55, 59, 62, 66, 70, 74, 78, 82, 86, 90, 94, 99, 104}

const _formatterLowerName = "-e-p-pe-pa-pn-pn-pb-pm-pf-ph-si-sip-sib-sie-sid-sif-sic-sim-so-sop-sob-soe-sod-sof-sox-soc-som-bips-bops"

func (i formatter) String() string {
	if i >= formatter(len(_formatterIndex)-1) {
		return fmt.Sprintf("formatter(%d)", i)
	}
	return _formatterName[_formatterIndex[i]:_formatterIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _formatterNoOp() {
	var x [1]struct{}
	_ = x[fmtNone-(0)]
	_ = x[fmtExists-(1)]
	_ = x[fmtPrint-(2)]
	_ = x[fmtPrintExists-(3)]
	_ = x[fmtAddress-(4)]
	_ = x[fmtNetmask-(5)]
	_ = x[fmtNetworkAddress-(6)]
	_ = x[fmtBroadcastAddress-(7)]
	_ = x[fmtMTU-(8)]
	_ = x[fmtFlags-(9)]
	_ = x[fmtHardwareAddress-(10)]
	_ = x[fmtInputStatistics-(11)]
	_ = x[fmtInputPackets-(12)]
	_ = x[fmtInputBytes-(13)]
	_ = x[fmtInputErrors-(14)]
	_ = x[fmtInputDropped-(15)]
	_ = x[fmtInputFIFO-(16)]
	_ = x[fmtInputCompressed-(17)]
	_ = x[fmtInputMulticast-(18)]
	_ = x[fmtOutputStatistics-(19)]
	_ = x[fmtOutputPackets-(20)]
	_ = x[fmtOutputBytes-(21)]
	_ = x[fmtOutputErrors-(22)]
	_ = x[fmtOutputDropped-(23)]
	_ = x[fmtOutputFIFO-(24)]
	_ = x[fmtOutputCollisions-(25)]
	_ = x[fmtOutputCarrierLosses-(26)]
	_ = x[fmtOutputMulticast-(27)]
	_ = x[fmtInputBytesSecond-(28)]
	_ = x[fmtOutputBytesSecond-(29)]
}

var _formatterValues = []formatter{fmtNone, fmtExists, fmtPrint, fmtPrintExists, fmtAddress, fmtNetmask, fmtNetworkAddress, fmtBroadcastAddress, fmtMTU, fmtFlags, fmtHardwareAddress, fmtInputStatistics, fmtInputPackets, fmtInputBytes, fmtInputErrors, fmtInputDropped, fmtInputFIFO, fmtInputCompressed, fmtInputMulticast, fmtOutputStatistics, fmtOutputPackets, fmtOutputBytes, fmtOutputErrors, fmtOutputDropped, fmtOutputFIFO, fmtOutputCollisions, fmtOutputCarrierLosses, fmtOutputMulticast, fmtInputBytesSecond, fmtOutputBytesSecond}

var _formatterNameToValueMap = map[string]formatter{
	_formatterName[0:0]:         fmtNone,
	_formatterLowerName[0:0]:    fmtNone,
	_formatterName[0:2]:         fmtExists,
	_formatterLowerName[0:2]:    fmtExists,
	_formatterName[2:4]:         fmtPrint,
	_formatterLowerName[2:4]:    fmtPrint,
	_formatterName[4:7]:         fmtPrintExists,
	_formatterLowerName[4:7]:    fmtPrintExists,
	_formatterName[7:10]:        fmtAddress,
	_formatterLowerName[7:10]:   fmtAddress,
	_formatterName[10:13]:       fmtNetmask,
	_formatterLowerName[10:13]:  fmtNetmask,
	_formatterName[13:16]:       fmtNetworkAddress,
	_formatterLowerName[13:16]:  fmtNetworkAddress,
	_formatterName[16:19]:       fmtBroadcastAddress,
	_formatterLowerName[16:19]:  fmtBroadcastAddress,
	_formatterName[19:22]:       fmtMTU,
	_formatterLowerName[19:22]:  fmtMTU,
	_formatterName[22:25]:       fmtFlags,
	_formatterLowerName[22:25]:  fmtFlags,
	_formatterName[25:28]:       fmtHardwareAddress,
	_formatterLowerName[25:28]:  fmtHardwareAddress,
	_formatterName[28:31]:       fmtInputStatistics,
	_formatterLowerName[28:31]:  fmtInputStatistics,
	_formatterName[31:35]:       fmtInputPackets,
	_formatterLowerName[31:35]:  fmtInputPackets,
	_formatterName[35:39]:       fmtInputBytes,
	_formatterLowerName[35:39]:  fmtInputBytes,
	_formatterName[39:43]:       fmtInputErrors,
	_formatterLowerName[39:43]:  fmtInputErrors,
	_formatterName[43:47]:       fmtInputDropped,
	_formatterLowerName[43:47]:  fmtInputDropped,
	_formatterName[47:51]:       fmtInputFIFO,
	_formatterLowerName[47:51]:  fmtInputFIFO,
	_formatterName[51:55]:       fmtInputCompressed,
	_formatterLowerName[51:55]:  fmtInputCompressed,
	_formatterName[55:59]:       fmtInputMulticast,
	_formatterLowerName[55:59]:  fmtInputMulticast,
	_formatterName[59:62]:       fmtOutputStatistics,
	_formatterLowerName[59:62]:  fmtOutputStatistics,
	_formatterName[62:66]:       fmtOutputPackets,
	_formatterLowerName[62:66]:  fmtOutputPackets,
	_formatterName[66:70]:       fmtOutputBytes,
	_formatterLowerName[66:70]:  fmtOutputBytes,
	_formatterName[70:74]:       fmtOutputErrors,
	_formatterLowerName[70:74]:  fmtOutputErrors,
	_formatterName[74:78]:       fmtOutputDropped,
	_formatterLowerName[74:78]:  fmtOutputDropped,
	_formatterName[78:82]:       fmtOutputFIFO,
	_formatterLowerName[78:82]:  fmtOutputFIFO,
	_formatterName[82:86]:       fmtOutputCollisions,
	_formatterLowerName[82:86]:  fmtOutputCollisions,
	_formatterName[86:90]:       fmtOutputCarrierLosses,
	_formatterLowerName[86:90]:  fmtOutputCarrierLosses,
	_formatterName[90:94]:       fmtOutputMulticast,
	_formatterLowerName[90:94]:  fmtOutputMulticast,
	_formatterName[94:99]:       fmtInputBytesSecond,
	_formatterLowerName[94:99]:  fmtInputBytesSecond,
	_formatterName[99:104]:      fmtOutputBytesSecond,
	_formatterLowerName[99:104]: fmtOutputBytesSecond,
}

var _formatterNames = []string{
	_formatterName[0:0],
	_formatterName[0:2],
	_formatterName[2:4],
	_formatterName[4:7],
	_formatterName[7:10],
	_formatterName[10:13],
	_formatterName[13:16],
	_formatterName[16:19],
	_formatterName[19:22],
	_formatterName[22:25],
	_formatterName[25:28],
	_formatterName[28:31],
	_formatterName[31:35],
	_formatterName[35:39],
	_formatterName[39:43],
	_formatterName[43:47],
	_formatterName[47:51],
	_formatterName[51:55],
	_formatterName[55:59],
	_formatterName[59:62],
	_formatterName[62:66],
	_formatterName[66:70],
	_formatterName[70:74],
	_formatterName[74:78],
	_formatterName[78:82],
	_formatterName[82:86],
	_formatterName[86:90],
	_formatterName[90:94],
	_formatterName[94:99],
	_formatterName[99:104],
}

// formatterString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func formatterString(s string) (formatter, error) {
	if val, ok := _formatterNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _formatterNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to formatter values", s)
}

// formatterValues returns all values of the enum
func formatterValues() []formatter {
	return _formatterValues
}

// formatterStrings returns a slice of all String values of the enum
func formatterStrings() []string {
	strs := make([]string, len(_formatterNames))
	copy(strs, _formatterNames)
	return strs
}

// IsAformatter returns "true" if the value is listed in the enum definition. "false" otherwise
func (i formatter) IsAformatter() bool {
	for _, v := range _formatterValues {
		if i == v {
			return true
		}
	}
	return false
}
