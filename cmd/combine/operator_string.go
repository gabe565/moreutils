// Code generated by "enumer -type operator -trimprefix operator -transform lower -text -output operator_string.go"; DO NOT EDIT.

package combine

import (
	"fmt"
	"strings"
)

const _operatorName = "andnotorxor"

var _operatorIndex = [...]uint8{0, 3, 6, 8, 11}

const _operatorLowerName = "andnotorxor"

func (i operator) String() string {
	if i >= operator(len(_operatorIndex)-1) {
		return fmt.Sprintf("operator(%d)", i)
	}
	return _operatorName[_operatorIndex[i]:_operatorIndex[i+1]]
}

// An "invalid array index" compiler error signifies that the constant values have changed.
// Re-run the stringer command to generate them again.
func _operatorNoOp() {
	var x [1]struct{}
	_ = x[operatorAnd-(0)]
	_ = x[operatorNot-(1)]
	_ = x[operatorOr-(2)]
	_ = x[operatorXor-(3)]
}

var _operatorValues = []operator{operatorAnd, operatorNot, operatorOr, operatorXor}

var _operatorNameToValueMap = map[string]operator{
	_operatorName[0:3]:       operatorAnd,
	_operatorLowerName[0:3]:  operatorAnd,
	_operatorName[3:6]:       operatorNot,
	_operatorLowerName[3:6]:  operatorNot,
	_operatorName[6:8]:       operatorOr,
	_operatorLowerName[6:8]:  operatorOr,
	_operatorName[8:11]:      operatorXor,
	_operatorLowerName[8:11]: operatorXor,
}

var _operatorNames = []string{
	_operatorName[0:3],
	_operatorName[3:6],
	_operatorName[6:8],
	_operatorName[8:11],
}

// operatorString retrieves an enum value from the enum constants string name.
// Throws an error if the param is not part of the enum.
func operatorString(s string) (operator, error) {
	if val, ok := _operatorNameToValueMap[s]; ok {
		return val, nil
	}

	if val, ok := _operatorNameToValueMap[strings.ToLower(s)]; ok {
		return val, nil
	}
	return 0, fmt.Errorf("%s does not belong to operator values", s)
}

// operatorValues returns all values of the enum
func operatorValues() []operator {
	return _operatorValues
}

// operatorStrings returns a slice of all String values of the enum
func operatorStrings() []string {
	strs := make([]string, len(_operatorNames))
	copy(strs, _operatorNames)
	return strs
}

// IsAoperator returns "true" if the value is listed in the enum definition. "false" otherwise
func (i operator) IsAoperator() bool {
	for _, v := range _operatorValues {
		if i == v {
			return true
		}
	}
	return false
}

// MarshalText implements the encoding.TextMarshaler interface for operator
func (i operator) MarshalText() ([]byte, error) {
	return []byte(i.String()), nil
}

// UnmarshalText implements the encoding.TextUnmarshaler interface for operator
func (i *operator) UnmarshalText(text []byte) error {
	var err error
	*i, err = operatorString(string(text))
	return err
}
